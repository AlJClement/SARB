#DATA Inputs
data:
  #This code is designed to start with mat dir and loop to get all the data, any scans in that folder will be used in the analysis.
  #scans are loaded into a dataloader for organization.
  mat_dir: '/Users/allison/Desktop/data' #directory of mat files.

  #Annotations are in yolo format and put all in one flat directory. They should have the same name as the mat_dir name with '_boundingbox.txt' at the end of the name.
  annotation_dir: '/Users/allison/Desktop/data/clinican_annotations' 
  #max number of annotations, for dataloader, anything else will be all zeros but allows this to keep the same shape for data loader purposes
  max_annotations: 20

  #visuals are created if the images are loaded, and features are calculated.
  visuals: 
    - orig_cache #original files, each channel plotted
  img_scale: [1,1,1,1,1] #scales each channel FOR VISUALS - given by Mihoko
  set_max: [255,10,10,10,255] #set max for each channel to allow for easy visualisation
  set_max_feat: [1,1,1,1,1] #set max value for features for visualization
  dpi: 1000 #save image quality
  normalize: True #set true if you want to noramlize the image BEFORE extracting features
  
  batch_size: 1 #will load each file into the data loader as 1 sample, set always to 1 currently

  ## define the disease and control as the folders 
  control: 'Cont'
  disease: 'PAN'

  #Resample will resample the images from the original size [2048,2048] to the size below. Smaller samplings allow for easier computations but we loose some info in resampling.
  resample: None #[256,256] #this is the size the image will be resampled for feature calculations.
  resample_roi: 512 #will after crop resample image size

  #If you want to split the image into a grid, setting this value will crop the image into patches of these sizes during data loading and save them each as a sample.
  patch_size: None #224 #None #256 #8  #either gets s


### FEATURE EXTRACTION DEFINITION
feature_extraction:
  load_existing: False #'/Users/allison/Desktop/data/features/HOG'  
  #if this is true you dont need the images to be loaded ** avoid time consuming step.
  #if you want to create extraction set this to False.

  load_images: True 
  #must be set to True if you are doing feature extraction
  #saves alot of time if you are not calculating features again

  #if you have annotations you can separate them by making the separate classes
  separate_classes: True #false if you want entire image
  anatomy_class: 0
  feature_classnames: ['Glo', 'Proximal', 'Distal'] #These are the classes in order for the CLINICIAN ROI
  #['Inner','Outer','Glo'] These are the classes in order for the ROI
  
  #choose the method, see notes for details about the end of the document about potential feature extraction methods and how they differ in inputs required.
  # method: SkIMG
  # features:
  #   - GABOR
  # gabor_frequency: 0.1

  # method: Pyfeats
  # features:
  #   - ALL

  method: SimCLR
  ### NOTE: in SimCLR.py you can change the encoder type and load different pretrained models. This is not coded in the configuration file yet.
  ## current default is resnet50.
  #model = models.resnet50(pretrained=True)
  #example other model is vgg
  #model = models.vgg19(pretrained=True)

  backbone: resnet50

  ## define comparisons you want to make
  # comparison of features, depends on feature.
  #compare:  ['histogram_per_img','run_PCA', 'run_tSNE', 'run_UMAP']

  # if compare is set to SVM this is learning. The SVM will be learnt but first PCA is applied so that you an plot SVM outputs.
  # Potentially you may want to run svm then get features and do PCA. This is currently not programed. SEE ./models/SVM.py
  # must be list format
  # if you choose PCA_SVM it will first use pca to reduce components then compute svm
  # if you use SVM_PCA it will first use pca then calculate svm.
  #
  compare: ['SVM_PCA']
  svm_kernel: 'linear' #must define

  ##'linear': if the data is linearly separable or if interpretability is important.
  ##'rbf' or 'poly': if the data has nonlinear relationships.
  ##'sigmoid': less common


  #define axis for histogram visuals
  histogram_max_y: 2000
  histogram_max_x: 4
  histogram_max_y_channels: 400
  histogram_max_x_channels: 10
  bins: 150

  ## pca components, if you define run_PCA, run_tSNE or run_UMAP
  # if its more than 2 it will plot for 2 then calucalte the number defined below and prints them, the 2 components will also be shown
  dimension_reduction_components: 'ALL'
  #outputs will be a PCA plot for two components
  #log file will print the following (copied from: https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html)
  ##explained_variance_ratio_: Percentage of variance explained by each of the selected components.
  ##singular_values_: The singular values corresponding to each of the selected components. The singular values are equal to the 2-norms of the n_components variables in the lower-dimensional space.
  ##n_components must be between 0 and min(n_samples, n_features)!!! if defined. OR define as ALL and max will be chosen by this criteria


  plot: True #either define as True or False, nothing will cause errors.

output:
  loc: ./output
  visuals:
    - plot_features

  