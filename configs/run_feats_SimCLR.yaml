#DATA Inputs
data:
  #This code is designed to start with mat dir and loop to get all the data, any scans in that folder will be used in the analysis.
  #scans are loaded into a dataloader for organization.
  mat_dir: '/Users/allison/Desktop/data' #directory of mat files.

  #Annotations are in yolo format and put all in one flat directory. They should have the same name as the mat_dir name with '_boundingbox.txt' at the end of the name.
  annotation_dir: '/Users/allison/Desktop/data/clinican_annotations' 
  #max number of annotations, for dataloader, anything else will be all zeros but allows this to keep the same shape for data loader purposes
  max_annotations: 10

  #visuals are created if the images are loaded, and features are calculated.
  visuals: 
    - orig_cache #original files, each channel plotted
  img_scale: [1,1,1,1,1] #scales each channel FOR VISUALS - given by Mihoko
  set_max: [255,10,10,10,255] #set max for each channel to allow for easy visualisation
  set_max_feat: [1,1,1,1,1] #set max value for features for visualization
  dpi: 1000 #save image quality
  normalize: True
  
  batch_size: 1 #will load each file into the data loader as 1 sample

  ## define the disease and control as the folders 
  control: 'Cont'
  disease: 'PAN'

  #Resample will resample the images from the original size [2048,2048] to the size below. Smaller samplings allow for easier computations but we loose some info in resampling.
  resample: [2048,2048] #[256,256] #this is the size the image will be resampled for feature calculations.

  #If you want to split the image into a grid, setting this value will crop the image into patches of these sizes during data loading and save them each as a sample.
  patch_size: None #224 #None #256 #8 


### FEATURE EXTRACTION DEFINITION
feature_extraction: 
  load_existing: False ## doesnt work because simclear doesnt get per pixel images. you must DO THIS FOR THE EACH SAMPLE SEPERATELY
  load_images: True #saves alot of time if you dont need these
  separate_classes: True 
  anatomy_class: 1
  feature_classnames: ['Glo', 'Prox', 'Distal']

  method: SimCLR
  ### NOTE: in SimCLR.py you can change the encoder type and load different pretrained models. This is not coded in the configuration file yet.
  ## current default is resnet50.
  #model = models.resnet50(pretrained=True)
  #example other model is vgg
  #model = models.vgg19(pretrained=True)

  backbone: resnet50
  plot: True
  compare: ['run_PCA','run_tSNE','run_UMAP']

  #run_PCA
  #Flattens disease and healthy features, compares using top two principal components.

output:
  loc: ./output
  visuals:
    - plot_features
